parameters:
  npm_dir: "."
  libraries: []

jobs:
- ${{ each target in parameters.targets }}:

  - ${{ if and(startsWith(target, 'wheels_'),ne(target, 'wheels_universal')) }}:

    - job: ${{ replace(replace(replace(replace(replace(replace(target, '?', ''), '*', ''), '[', ''), ']', ''), '!', ''), '-', '_') }}
      displayName: ${{ target }}
      dependsOn: ${{ parameters.dependsOn }}
      condition: succeeded()

      variables:
        CIBW_TEST_COMMAND: ${{ parameters.test_command }}
        CIBW_TEST_EXTRAS: ${{ parameters.test_extras }}
        OA_TARGET: ${{ target }}
        job_name: ${{ replace(replace(replace(replace(replace(replace(target, '?', ''), '*', ''), '[', ''), ']', ''), '!', ''), '-', '_') }}
        ${{ if contains(target, 'macos') }}:
          os: 'macos'
        ${{ if contains(target, 'win') }}:
          os: 'win'
        ${{ if contains(target, 'linux') }}:
          os: 'linux'
        ${{ if not(or(eq(target, 'wheels_macos'), eq(target, 'wheels_linux'), eq(target, 'wheels_windows'))) }}:
          CIBW_BUILD: ${{ replace(target, 'wheels_', '') }}

      pool:
        ${{ if eq(variables.os, 'macos') }}:
          vmImage: macos-latest
        ${{ if eq(variables.os, 'linux') }}:
          vmImage: ubuntu-latest
        ${{ if eq(variables.os, 'win') }}:
          vmImage: windows-latest

      steps:
        - checkout: self
          lfs: true
          submodules: ${{ coalesce(parameters.submodules, true) }}
          fetchDepth: 999999999
        - task: UsePythonVersion@0
          displayName: Install Python
        - bash: python -m pip install --upgrade pip execute-517
          displayName: Upgrading pip
        - ${{ if eq(variables.os, 'linux') }}:
            - bash: |
                python -m pip install --upgrade docker
              displayName: Installing docker
        - ${{ if eq(variables.os, 'linux') }}:
            - bash: |
                docker run --rm --privileged hypriot/qemu-register
              displayName: Registering qemu
        - ${{ if parameters.remove_local_scheme }}:
            - bash: |
                version=$(execute-517 'setup.py --version' | tail -1 | cut -d '+' -f 1)
                echo "##vso[task.setvariable variable=SETUPTOOLS_SCM_PRETEND_VERSION]$version"
                echo "##vso[task.setvariable variable=CIBW_ENVIRONMENT]SETUPTOOLS_SCM_PRETEND_VERSION=\"$version\""
              displayName: Remove local scheme from version
            - bash: |
                echo "SETUPTOOLS_SCM_PRETEND_VERSION=$SETUPTOOLS_SCM_PRETEND_VERSION"
                echo "CIBW_ENVIRONMENT=$CIBW_ENVIRONMENT"
              displayName: Display modified version number
        - bash: python -m pip install cibuildwheel
          displayName: Installing cibuildwheel
        - bash: cibuildwheel --output-dir wheelhouse .
          displayName: Running cibuildwheel
        - publish: 'wheelhouse'
          artifact: ${{ variables.job_name }}

  - ${{ if eq(target, 'npm') }}:

    - job: ${{ target }}
      dependsOn: ${{ parameters.dependsOn }}
      condition: succeeded()

      pool:
        vmImage: ubuntu-latest

      steps:
        - checkout: self
          submodules: ${{ coalesce(parameters.submodules, true) }}
          fetchDepth: 999999999

        - task: Npm@1
          inputs:
            command: 'install'
            workingDir: ${{ parameters.npm_dir }}

  - ${{ if eq(target, 'sdist') }}:
    - job: ${{ target }}
      dependsOn: ${{ parameters.dependsOn }}
      condition: succeeded()
      pool:
        vmImage: ubuntu-latest
      steps:
      - checkout: self
        submodules: ${{ coalesce(parameters.submodules, true) }}
        fetchDepth: 999999999
      - task: UsePythonVersion@0
        displayName: setup python3.8
        inputs:
          versionSpec: '3.8'
      - ${{ each library in parameters.libraries }}:
        - script: sudo apt-get install -y ${{ library }}
          displayName: Installing ${{ library }} with apt
      - script: 'python -m pip install -U --force-reinstall build execute-517'
        displayName: "Install build tools"
      - ${{ if parameters.remove_local_scheme }}:
          - bash: |
              version=$(execute-517 'setup.py --version' | tail -1 | cut -d '+' -f 1)
              echo "##vso[task.setvariable variable=SETUPTOOLS_SCM_PRETEND_VERSION]$version"
            displayName: Remove local scheme from version
          - bash: |
              echo "SETUPTOOLS_SCM_PRETEND_VERSION=$SETUPTOOLS_SCM_PRETEND_VERSION"
            displayName: Display modified version number
      - script: 'python -m build --sdist --outdir wheelhouse .'
        displayName: "Build source distribution"
      - ${{ if parameters.test_extras }}:
        - script: ${{ format('python -m pip install --force-reinstall $(find wheelhouse -name "*.tar.gz")[{0}]', parameters.test_extras) }}
          displayName: "Installing source distribution"
      - ${{ if not(parameters.test_extras) }}:
        - script: 'python -m pip install $(find wheelhouse -name "*.tar.gz")'
          displayName: "Installing source distribution"
      - ${{ if parameters.test_command }}:
        - script: ${{ parameters.test_command }}
          displayName: "Test source distribution"
          workingDirectory: $(Agent.TempDirectory)
      - publish: 'wheelhouse'
        artifact: ${{ target }}

  - ${{ if eq(target, 'wheels_universal') }}:
    - job: ${{ target }}
      dependsOn: ${{ parameters.dependsOn }}
      condition: succeeded()
      pool:
        vmImage: ubuntu-latest
      steps:
      - checkout: self
        submodules: ${{ coalesce(parameters.submodules, true) }}
        fetchDepth: 999999999
      - task: UsePythonVersion@0
        displayName: setup python3.8
        inputs:
          versionSpec: '3.8'
      - script: 'python -m pip install -U --force-reinstall build execute-517'
        displayName: "Install build tools"
      - ${{ if parameters.remove_local_scheme }}:
          - bash: |
              version=$(execute-517 'setup.py --version' | tail -1 | cut -d '+' -f 1)
              echo "##vso[task.setvariable variable=SETUPTOOLS_SCM_PRETEND_VERSION]$version"
            displayName: Remove local scheme from version
          - bash: |
              echo "SETUPTOOLS_SCM_PRETEND_VERSION=$SETUPTOOLS_SCM_PRETEND_VERSION"
            displayName: Display modified version number
      - script: 'python -m build --wheel --outdir wheelhouse .'
        displayName: "Build universal wheel"
      - ${{ if parameters.test_extras }}:
        - script: ${{ format('python -m pip install --force-reinstall $(find wheelhouse -name "*.whl")[{0}]', parameters.test_extras) }}
          displayName: "Installing universal wheel"
      - ${{ if not(parameters.test_extras) }}:
        - script: 'python -m pip install $(find wheelhouse -name "*.whl")'
          displayName: "Installing universal wheel"
      - ${{ if parameters.test_command }}:
        - script: ${{ parameters.test_command }}
          displayName: "Test universal wheel"
          workingDirectory: $(Agent.TempDirectory)
      - publish: 'wheelhouse'
        artifact: ${{ target }}

- ${{ if coalesce(parameters.pypi_connection_name, parameters.artifact_feed) }}:
  - job: publish

    dependsOn:
    - ${{ each target in parameters.targets }}:
      - ${{ replace(replace(replace(replace(replace(replace(target, '?', ''), '*', ''), '[', ''), ']', ''), '!', ''), '-', '_') }}

    condition: succeeded()

    pool:
      vmImage: ubuntu-latest

    steps:
    - checkout: none
    - task: UsePythonVersion@0
      displayName: setup python3.8
      inputs:
        versionSpec: '3.8'
    - script: 'python -m pip install -U --user --force-reinstall twine'
      displayName: "install twine"
    # Get all artifacts from this build
    - ${{ each target in parameters.targets }}:
      - ${{ if ne(target, 'npm') }}:
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'current'
            targetPath: 'wheelhouse'
            artifactName: ${{ replace(replace(replace(replace(replace(replace(target, '?', ''), '*', ''), '[', ''), ']', ''), '!', ''), '-', '_') }}

    - script: 'ls -R wheelhouse'
      displayName: "List files for upload"

    - ${{ if parameters.pypi_connection_name }}:
      - task: TwineAuthenticate@1
        inputs:
          pythonUploadServiceConnection: ${{ parameters.pypi_connection_name }}

      - script:  ${{ format('python -m twine upload --skip-existing -r {0} --config-file $(PYPIRC_PATH) "wheelhouse/*"', coalesce(parameters.pypi_endpoint_name, parameters.pypi_connection_name)) }}
        displayName: "upload sdist and wheels to PyPI"

    # If you want to specify an organisation scoped feed then you don't prefix with the project,
    # if you want a project scoped feed, you must prefix the Authenticate task with the project
    # however, twine only gets the feed name.
    - ${{ if parameters.artifact_feed }}:
      - ${{ if not(parameters.artifact_project) }}:
        - task: TwineAuthenticate@1
          inputs:
            artifactFeed: ${{ parameters.artifact_feed }}

      - ${{ if parameters.artifact_project }}:
        - task: TwineAuthenticate@1
          inputs:
            artifactFeed: ${{ format('{0}/{1}', parameters.artifact_project, parameters.artifact_feed) }}

      - script:  ${{ format('python -m twine upload --skip-existing -r {0} --config-file $(PYPIRC_PATH) "wheelhouse/*"', parameters.artifact_feed) }}
        displayName: "upload sdist and wheels to Artifact feed"

- ${{ if parameters.npm_connection_name }}:
  - job: publish_npm
    dependsOn: ${{ parameters.targets }}
    condition: succeeded()
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        submodules: ${{ coalesce(parameters.submodules, true) }}
        fetchDepth: 999999999
      - task: Npm@1
        inputs:
          command: 'install'
          workingDir: ${{ parameters.npm_dir }}
      - task: Npm@1
        inputs:
          command: 'publish'
          publishEndpoint: ${{ parameters.npm_connection_name}}
          workingDir: ${{ parameters.npm_dir }}
